---
// Starfield.astro
---

<style>
  /* Full-screen canvas styling for starfield */
  #starfield {
    display: block;
  }
</style>

<canvas id="starfield"></canvas>

<script type="module">
  // --- CANVAS SETUP ---
  const canvasElement = document.getElementById("starfield");
  const canvasContext = canvasElement.getContext("2d");
  canvasContext.imageSmoothingEnabled = false;

  // --- OFFSCREEN CANVAS (STAR CACHE) ---
  const starCacheCanvas = document.createElement("canvas");
  const starCacheContext = starCacheCanvas.getContext("2d");
  const starCacheDimension = 4;
  starCacheCanvas.width = starCacheDimension;
  starCacheCanvas.height = starCacheDimension;
  starCacheContext.fillStyle = "#fff";
  starCacheContext.fillRect(0, 0, starCacheDimension, starCacheDimension);

  // --- STARFIELD CONFIGURATION VARIABLES ---
  const drawingScaleFactor = 2;
  const totalStars = 200;
  let starArray = [];
  let meteorArray = [];
  let constellationLines = [];

  // --- INITIALIZE STARS ---
  function initializeStars() {
    starArray = [];
    for (let index = 0; index < totalStars; index++) {
      starArray.push({
        x: Math.random() * canvasElement.width,
        y: Math.random() * canvasElement.height,
        radius: Math.random() * 1.5,
        speed: Math.random() * 0.5 + 0.2,
        alpha: Math.random() * 0.5 + 0.5,
        twinkleSpeed: Math.random() * 0.02 + 0.005,
        twinkleDirection: Math.random() < 0.5 ? 1 : -1,
        offscreen: false,
      });
    }
  }

  // --- RESIZE CANVAS TO WINDOW SIZE ---
  function resizeCanvasToWindow() {
    canvasElement.width = window.innerWidth;
    canvasElement.height = window.innerHeight;
  }
  window.addEventListener("resize", resizeCanvasToWindow);
  resizeCanvasToWindow();
  initializeStars();

  // --- GLOBAL STARFIELD STATE FOR DRAWING MODE ---
  window.starfieldState = {
    stars: starArray,
    permanentLines: constellationLines,
    lineActive: false,
    lineStart: { x: 0, y: 0 },
    lineEnd: { x: 0, y: 0 },
    lineStartStarIndex: null,
    currentHover: null,
  };

  // --- ACTIVE MODE: ANIMATE STARS, METEORS, AND CONSTELLATION LINES ---
  function updateActiveMode() {
    // Synchronize speeds for stars connected by constellation lines
    for (let line of constellationLines) {
      const starStart = starArray[line.startIndex];
      const starEnd = starArray[line.endIndex];
      if (starStart && starEnd) {
        const averageSpeed = (starStart.speed + starEnd.speed) / 2;
        starStart.speed = averageSpeed;
        starEnd.speed = averageSpeed;
      }
    }
    // Clear canvas
    canvasContext.fillStyle = "black";
    canvasContext.fillRect(0, 0, canvasElement.width, canvasElement.height);
    // Update and draw stars
    for (let i = 0; i < starArray.length; i++) {
      const currentStar = starArray[i];
      currentStar.alpha +=
        currentStar.twinkleSpeed * currentStar.twinkleDirection;
      if (currentStar.alpha >= 1 || currentStar.alpha <= 0.5) {
        currentStar.twinkleDirection *= -1;
        currentStar.alpha = Math.max(0.5, Math.min(1, currentStar.alpha));
      }
      canvasContext.globalAlpha = currentStar.alpha;
      const starDrawSize = currentStar.radius * drawingScaleFactor * 2;
      canvasContext.drawImage(
        starCacheCanvas,
        0,
        0,
        starCacheDimension,
        starCacheDimension,
        currentStar.x - currentStar.radius * drawingScaleFactor,
        currentStar.y - currentStar.radius * drawingScaleFactor,
        starDrawSize,
        starDrawSize
      );
      // Move star and recycle if offscreen and not connected in a constellation
      currentStar.x -= currentStar.speed;
      currentStar.offscreen = currentStar.x + currentStar.radius < 0;
      if (
        currentStar.offscreen &&
        !constellationLines.some(
          (line) => line.startIndex === i || line.endIndex === i
        )
      ) {
        currentStar.x = canvasElement.width;
        currentStar.y = Math.random() * canvasElement.height;
        currentStar.offscreen = false;
      }
    }
    canvasContext.globalAlpha = 1;
    // Spawn and update meteors
    if (Math.random() < 0.005) {
      meteorArray.push(generateMeteor());
    }
    for (let m = meteorArray.length - 1; m >= 0; m--) {
      const meteor = meteorArray[m];
      meteor.x += meteor.dx;
      meteor.y += meteor.dy;
      canvasContext.lineWidth = 2;
      if (meteor.type === "rect") {
        canvasContext.fillStyle = "#fff";
        canvasContext.fillRect(meteor.x, meteor.y, meteor.width, meteor.height);
      } else {
        canvasContext.strokeStyle = "#fff";
        canvasContext.beginPath();
        canvasContext.moveTo(meteor.x, meteor.y);
        canvasContext.lineTo(
          meteor.x + meteor.length * Math.cos(meteor.angle),
          meteor.y + meteor.length * Math.sin(meteor.angle)
        );
        canvasContext.stroke();
      }
      if (
        meteor.x < 0 ||
        meteor.x > canvasElement.width ||
        meteor.y < 0 ||
        meteor.y > canvasElement.height
      ) {
        meteorArray.splice(m, 1);
      }
    }
    // Draw constellation lines
    for (let line of constellationLines) {
      const starStart = starArray[line.startIndex];
      const starEnd = starArray[line.endIndex];
      const averageAlpha = (starStart.alpha + starEnd.alpha) / 2;
      canvasContext.globalAlpha = averageAlpha;
      canvasContext.strokeStyle = "white";
      canvasContext.lineWidth = 2;
      canvasContext.beginPath();
      canvasContext.moveTo(starStart.x, starStart.y);
      canvasContext.lineTo(starEnd.x, starEnd.y);
      canvasContext.stroke();
    }
    canvasContext.globalAlpha = 1;
    // Remove constellation lines if both stars are offscreen
    for (let index = constellationLines.length - 1; index >= 0; index--) {
      const { startIndex, endIndex } = constellationLines[index];
      if (
        starArray[startIndex].x + starArray[startIndex].radius <= 0 &&
        starArray[endIndex].x + starArray[endIndex].radius <= 0
      ) {
        constellationLines.splice(index, 1);
      }
    }
  }

  // --- HELPER: Generate a meteor with random properties ---
  function generateMeteor() {
    const meteorType = Math.random() < 0.5 ? "rect" : "line";
    const meteorStartX = Math.random() * canvasElement.width;
    const meteorStartY = Math.random() * canvasElement.height;
    const meteorAngle = ((Math.random() * 50 + 20) * Math.PI) / 180;
    const meteorSpeed = Math.random() * 7 + 3;
    return {
      x: meteorStartX,
      y: meteorStartY,
      angle: meteorAngle,
      dx: meteorSpeed * Math.cos(meteorAngle),
      dy: meteorSpeed * Math.sin(meteorAngle),
      type: meteorType,
      width: meteorType === "rect" ? Math.random() * 6 + 2 : 0,
      height: meteorType === "rect" ? Math.random() * 6 + 2 : 0,
      length: meteorType === "line" ? Math.random() * 20 + 10 : 0,
    };
  }

  // --- STATIC MODE: Render starfield for drawing ---
  function updateStaticMode() {
    canvasContext.fillStyle = "black";
    canvasContext.fillRect(0, 0, canvasElement.width, canvasElement.height);
    for (let i = 0; i < starArray.length; i++) {
      const currentStar = starArray[i];
      let isStarHovered = false;
      if (window.starfieldState.currentHover) {
        const deltaX = currentStar.x - window.starfieldState.currentHover.x;
        const deltaY = currentStar.y - window.starfieldState.currentHover.y;
        if (deltaX * deltaX + deltaY * deltaY < 400) {
          isStarHovered = true;
        }
      }
      if (!isStarHovered) {
        currentStar.alpha +=
          currentStar.twinkleSpeed * currentStar.twinkleDirection;
        if (currentStar.alpha >= 1 || currentStar.alpha <= 0.5) {
          currentStar.twinkleDirection *= -1;
          currentStar.alpha = Math.max(0.5, Math.min(1, currentStar.alpha));
        }
      } else {
        currentStar.alpha = 1;
      }
      canvasContext.globalAlpha = currentStar.alpha;
      const effectiveRadius = isStarHovered
        ? currentStar.radius * 3
        : currentStar.radius;
      const starDrawSize = effectiveRadius * drawingScaleFactor * 2;
      canvasContext.drawImage(
        starCacheCanvas,
        0,
        0,
        starCacheDimension,
        starCacheDimension,
        currentStar.x - effectiveRadius * drawingScaleFactor,
        currentStar.y - effectiveRadius * drawingScaleFactor,
        starDrawSize,
        starDrawSize
      );
    }
    canvasContext.globalAlpha = 1;
    // Draw permanent lines
    for (let line of constellationLines) {
      const starStart = starArray[line.startIndex];
      const starEnd = starArray[line.endIndex];
      const averageAlpha = (starStart.alpha + starEnd.alpha) / 2;
      canvasContext.globalAlpha = averageAlpha;
      canvasContext.strokeStyle = "white";
      canvasContext.lineWidth = 2;
      canvasContext.beginPath();
      canvasContext.moveTo(starStart.x, starStart.y);
      canvasContext.lineTo(starEnd.x, starEnd.y);
      canvasContext.stroke();
    }
    canvasContext.globalAlpha = 1;
    // Draw active drawing line if it exists
    if (window.starfieldState.lineActive) {
      canvasContext.strokeStyle = "white";
      canvasContext.lineWidth = 2;
      canvasContext.beginPath();
      canvasContext.moveTo(
        window.starfieldState.lineStart.x,
        window.starfieldState.lineStart.y
      );
      canvasContext.lineTo(
        window.starfieldState.lineEnd.x,
        window.starfieldState.lineEnd.y
      );
      canvasContext.stroke();
    }
  }

  // --- ANIMATION LOOPS ---

  // Active mode loop
  let activeLoopId = null;
  function runActiveLoop() {
    updateActiveMode();
    activeLoopId = requestAnimationFrame(runActiveLoop);
  }
  function startActiveAnimationLoop() {
    if (!activeLoopId) runActiveLoop();
  }
  function stopActiveAnimationLoop() {
    if (activeLoopId) {
      cancelAnimationFrame(activeLoopId);
      activeLoopId = null;
    }
  }

  // Static mode loop for drawing
  let staticLoopId = null;
  function runStaticLoop() {
    updateStaticMode();
    staticLoopId = requestAnimationFrame(runStaticLoop);
  }
  function startStaticAnimationLoop() {
    if (!staticLoopId) runStaticLoop();
  }
  function stopStaticAnimationLoop() {
    if (staticLoopId) {
      cancelAnimationFrame(staticLoopId);
      staticLoopId = null;
    }
  }

  // --- START ACTIVE ANIMATION ---
  startActiveAnimationLoop();
  // Expose loop control methods globally
  window.startActiveLoop = startActiveAnimationLoop;
  window.stopActiveLoop = stopActiveAnimationLoop;
  window.startStaticLoop = startStaticAnimationLoop;
  window.stopStaticLoop = stopStaticAnimationLoop;
</script>
