---
// Starfield.astro
// Renders a full-screen canvas with an animated starfield (active mode).
// It also sets up a global starfieldState used by drawing mode.
---

<style>
  #starfield {
    display: block;
  }
</style>

<canvas id="starfield"></canvas>

<script type="module">
  const canvas = document.getElementById("starfield");
  const ctx = canvas.getContext("2d");
  // Disable image smoothing for a pixelated look.
  ctx.imageSmoothingEnabled = false;

  // Create an offscreen canvas (cache) for drawing pixelated stars.
  const starCache = document.createElement("canvas");
  const starCtx = starCache.getContext("2d");
  const starCacheSize = 4;
  starCache.width = starCacheSize;
  starCache.height = starCacheSize;
  starCtx.fillStyle = "#fff";
  starCtx.fillRect(0, 0, starCacheSize, starCacheSize);

  const scaleFactor = 2;
  const numStars = 200;
  let stars = [];
  let meteors = [];
  let permanentLines = [];

  function initStars() {
    stars = [];
    for (let i = 0; i < numStars; i++) {
      stars.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        r: Math.random() * 1.5,
        s: Math.random() * 0.5 + 0.2,
        alpha: Math.random() * 0.5 + 0.5,
        twinkleSpeed: Math.random() * 0.02 + 0.005,
        twinkleDirection: Math.random() < 0.5 ? 1 : -1,
        offscreen: false,
      });
    }
  }

  function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    initStars();
  }
  window.addEventListener("resize", resizeCanvas);
  resizeCanvas();

  // Create a global state object for sharing with drawing mode.
  window.starfieldState = {
    stars, // reference to stars array
    permanentLines, // reference to permanentLines array
    lineActive: false, // is an active (inâ€‘progress) line being drawn?
    lineStart: { x: 0, y: 0 },
    lineEnd: { x: 0, y: 0 },
    lineStartStarIndex: null,
    currentHover: null,
  };

  // --- Active Mode (animation) ---
  function updateActiveMode() {
    // Unify speeds for stars connected by permanent lines.
    for (let line of permanentLines) {
      const s1 = stars[line.startIndex];
      const s2 = stars[line.endIndex];
      if (s1 && s2) {
        const avgSpeed = (s1.s + s2.s) / 2;
        s1.s = avgSpeed;
        s2.s = avgSpeed;
      }
    }
    ctx.fillStyle = "black";
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Update and draw stars.
    for (let i = 0; i < stars.length; i++) {
      const star = stars[i];
      star.alpha += star.twinkleSpeed * star.twinkleDirection;
      if (star.alpha >= 1 || star.alpha <= 0.5) {
        star.twinkleDirection *= -1;
        star.alpha = Math.max(0.5, Math.min(1, star.alpha));
      }
      ctx.globalAlpha = star.alpha;
      const drawSize = star.r * scaleFactor * 2;
      ctx.drawImage(
        starCache,
        0,
        0,
        starCacheSize,
        starCacheSize,
        star.x - star.r * scaleFactor,
        star.y - star.r * scaleFactor,
        drawSize,
        drawSize
      );
      // Move star left and recycle if offscreen and not connected.
      star.x -= star.s;
      star.offscreen = star.x + star.r < 0;
      if (
        star.offscreen &&
        !permanentLines.some((l) => l.startIndex === i || l.endIndex === i)
      ) {
        star.x = canvas.width;
        star.y = Math.random() * canvas.height;
        star.offscreen = false;
      }
    }
    ctx.globalAlpha = 1;

    // Meteors.
    if (Math.random() < 0.005) meteors.push(spawnMeteor());
    for (let m = meteors.length - 1; m >= 0; m--) {
      const meteor = meteors[m];
      meteor.x += meteor.dx;
      meteor.y += meteor.dy;
      ctx.lineWidth = 2;
      if (meteor.type === "rect") {
        ctx.fillStyle = "#fff";
        ctx.fillRect(meteor.x, meteor.y, meteor.width, meteor.height);
      } else {
        ctx.strokeStyle = "#fff";
        ctx.beginPath();
        ctx.moveTo(meteor.x, meteor.y);
        ctx.lineTo(
          meteor.x + meteor.length * Math.cos(meteor.angle),
          meteor.y + meteor.length * Math.sin(meteor.angle)
        );
        ctx.stroke();
      }
      if (
        meteor.x < 0 ||
        meteor.x > canvas.width ||
        meteor.y < 0 ||
        meteor.y > canvas.height
      ) {
        meteors.splice(m, 1);
      }
    }

    // Draw permanent constellation lines.
    for (let line of permanentLines) {
      const s1 = stars[line.startIndex],
        s2 = stars[line.endIndex];
      const avgAlpha = (s1.alpha + s2.alpha) / 2;
      ctx.globalAlpha = avgAlpha;
      ctx.strokeStyle = "white";
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(s1.x, s1.y);
      ctx.lineTo(s2.x, s2.y);
      ctx.stroke();
    }
    ctx.globalAlpha = 1;

    // Remove lines if both connected stars are offscreen.
    for (let l = permanentLines.length - 1; l >= 0; l--) {
      const { startIndex, endIndex } = permanentLines[l];
      if (
        stars[startIndex].x + stars[startIndex].r <= 0 &&
        stars[endIndex].x + stars[endIndex].r <= 0
      ) {
        permanentLines.splice(l, 1);
      }
    }
  }

  function spawnMeteor() {
    const type = Math.random() < 0.5 ? "rect" : "line";
    const x = Math.random() * canvas.width;
    const y = Math.random() * canvas.height;
    const angle = ((Math.random() * 50 + 20) * Math.PI) / 180;
    const spd = Math.random() * 7 + 3;
    return {
      x,
      y,
      angle,
      dx: spd * Math.cos(angle),
      dy: spd * Math.sin(angle),
      type,
      width: type === "rect" ? Math.random() * 6 + 2 : 0,
      height: type === "rect" ? Math.random() * 6 + 2 : 0,
      length: type === "line" ? Math.random() * 20 + 10 : 0,
    };
  }

  // Active animation loop.
  let activeLoopId = null;
  function activeLoop() {
    updateActiveMode();
    activeLoopId = requestAnimationFrame(activeLoop);
  }
  function startActiveLoop() {
    if (!activeLoopId) activeLoop();
  }
  function stopActiveLoop() {
    if (activeLoopId) {
      cancelAnimationFrame(activeLoopId);
      activeLoopId = null;
    }
  }
  startActiveLoop();

  // --- Static Mode (drawing mode) ---
  // In static mode the stars remain fixed (no position updates) and the active drawing line is rendered.
  let staticLoopId = null;
  function updateStaticMode() {
    ctx.fillStyle = "black";
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Draw stars with hover detection.
    for (let i = 0; i < stars.length; i++) {
      const star = stars[i];
      let hovered = false;
      if (window.starfieldState.currentHover) {
        const dx = star.x - window.starfieldState.currentHover.x;
        const dy = star.y - window.starfieldState.currentHover.y;
        if (dx * dx + dy * dy < 400) {
          // within 20px radius
          hovered = true;
        }
      }
      // Update twinkle if not hovered; if hovered, set alpha to 1.
      if (!hovered) {
        star.alpha += star.twinkleSpeed * star.twinkleDirection;
        if (star.alpha >= 1 || star.alpha <= 0.5) {
          star.twinkleDirection *= -1;
          star.alpha = Math.max(0.5, Math.min(1, star.alpha));
        }
      } else {
        star.alpha = 1;
      }
      ctx.globalAlpha = star.alpha;
      // Increase star size on hover.
      const effectiveRadius = hovered ? star.r * 3 : star.r;
      const drawSize = effectiveRadius * scaleFactor * 2;
      ctx.drawImage(
        starCache,
        0,
        0,
        starCacheSize,
        starCacheSize,
        star.x - effectiveRadius * scaleFactor,
        star.y - effectiveRadius * scaleFactor,
        drawSize,
        drawSize
      );
    }
    ctx.globalAlpha = 1;

    // Draw permanent lines.
    for (let line of permanentLines) {
      const s1 = stars[line.startIndex],
        s2 = stars[line.endIndex];
      const avgAlpha = (s1.alpha + s2.alpha) / 2;
      ctx.globalAlpha = avgAlpha;
      ctx.strokeStyle = "white";
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(s1.x, s1.y);
      ctx.lineTo(s2.x, s2.y);
      ctx.stroke();
    }
    ctx.globalAlpha = 1;

    // Draw the active drawing line, if any.
    if (window.starfieldState.lineActive) {
      ctx.strokeStyle = "white";
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(
        window.starfieldState.lineStart.x,
        window.starfieldState.lineStart.y
      );
      ctx.lineTo(
        window.starfieldState.lineEnd.x,
        window.starfieldState.lineEnd.y
      );
      ctx.stroke();
    }
  }

  function staticLoop() {
    updateStaticMode();
    staticLoopId = requestAnimationFrame(staticLoop);
  }
  function startStaticLoop() {
    if (!staticLoopId) staticLoop();
  }
  function stopStaticLoop() {
    if (staticLoopId) {
      cancelAnimationFrame(staticLoopId);
      staticLoopId = null;
    }
  }
  // Expose loop controls.
  window.startActiveLoop = startActiveLoop;
  window.stopActiveLoop = stopActiveLoop;
  window.startStaticLoop = startStaticLoop;
  window.stopStaticLoop = stopStaticLoop;
</script>
