---
// RocketGame.astro
---

<script type="module">
  // RESPONSIVE CHECK: Hide rocket on small screens
  if (window.innerWidth < 768) {
    const rocketElement = document.getElementById("rocket");
    if (rocketElement) {
      rocketElement.style.display = "none";
    }
  } else {
    // --- UI ELEMENT REFERENCES ---
    const controlsDisplay = document.getElementById("controls");
    const drawButton = document.getElementById("drawConstellationsButton");
    const centerText = document.querySelector(".text-center");
    const githubSection = document.getElementById("github-container");
    const linkedinSection = document.getElementById("linkedin-container");
    const resumeSection = document.getElementById("resume-container");

    // --- FADE FUNCTION ---
    function fadeElement(element, targetOpacity, transitionDuration = 0.5) {
      if (element) {
        element.style.transition = `opacity ${transitionDuration}s`;
        element.style.opacity = targetOpacity;
      }
    }

    // --- GAME STATE VARIABLES ---
    let gameSessionActive = false;
    let playerScore = 0;
    let activeTargetElement = null;
    let gameHasEnded = false;

    // --- EVENT HANDLER: START GAME SESSION ---
    window.addEventListener("rocketGameSessionStart", () => {
      if (!gameSessionActive) {
        gameSessionActive = true;
        if (controlsDisplay) {
          controlsDisplay.innerHTML =
            "Use arrow keys to move the rocket.<br>Press 'Space' to shoot.<br>Press 'Enter' to end the game.";
          fadeElement(controlsDisplay, "1", 0.5);
        }
        fadeElement(centerText, "0", 0.5);
        fadeElement(githubSection, "0", 0.5);
        fadeElement(linkedinSection, "0", 0.5);
        fadeElement(resumeSection, "0", 0.5);
        fadeElement(drawButton, "0", 0.5);
      }
    });

    // --- EVENT HANDLER: KEYBOARD EVENTS ---
    window.addEventListener("keydown", (keyboardEvent) => {
      const arrowKeys = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"];
      if (!gameSessionActive && arrowKeys.includes(keyboardEvent.key)) {
        window.dispatchEvent(new CustomEvent("rocketGameSessionStart"));
      }
      if (gameSessionActive && keyboardEvent.key === "Enter") {
        endGameSession();
      }
    });

    // --- METHOD: Spawn a new target ---
    function spawnTargetElement() {
      if (activeTargetElement) return;
      const controlsRect = controlsDisplay.getBoundingClientRect();
      const rocketRect = document
        .getElementById("rocket")
        .getBoundingClientRect();
      let targetX, targetY;
      for (let attempt = 0; attempt < 10; attempt++) {
        targetX = Math.random() * (window.innerWidth - 32);
        targetY = Math.random() * (window.innerHeight - 32);
        if (
          targetX < controlsRect.right &&
          targetX + 32 > controlsRect.left &&
          targetY < controlsRect.bottom &&
          targetY + 32 > controlsRect.top
        )
          continue;
        if (
          targetX < rocketRect.right &&
          targetX + 32 > rocketRect.left &&
          targetY < rocketRect.bottom &&
          targetY + 32 > rocketRect.top
        )
          continue;
        break;
      }
      const newTarget = document.createElement("div");
      newTarget.style.position = "absolute";
      newTarget.style.width = "32px";
      newTarget.style.height = "32px";
      newTarget.style.backgroundColor = "red";
      newTarget.style.border = "4px solid white";
      newTarget.style.borderRadius = "50%";
      newTarget.style.left = `${targetX}px`;
      newTarget.style.top = `${targetY}px`;
      document.body.appendChild(newTarget);
      activeTargetElement = newTarget;
      newTarget.removalTimeout = setTimeout(removeTargetElement, 5000);
    }

    // --- METHOD: Remove the current target ---
    function removeTargetElement() {
      if (activeTargetElement) {
        clearTimeout(activeTargetElement.removalTimeout);
        activeTargetElement.remove();
        activeTargetElement = null;
      }
    }

    // --- METHOD: End the game session ---
    function endGameSession() {
      if (activeTargetElement) {
        clearTimeout(activeTargetElement.removalTimeout);
        activeTargetElement.remove();
        activeTargetElement = null;
      }
      fadeElement(controlsDisplay, "0", 0.5);
      gameSessionActive = false;
      playerScore = 0;
      if (controlsDisplay) controlsDisplay.innerHTML = "";
      gameHasEnded = true;
      fadeElement(centerText, "1", 0.5);
      fadeElement(githubSection, "1", 0.5);
      fadeElement(linkedinSection, "1", 0.5);
      fadeElement(resumeSection, "1", 0.5);
      fadeElement(drawButton, "1", 0.5);
      setTimeout(() => {
        gameHasEnded = false;
      }, 1000);
      window.dispatchEvent(new CustomEvent("rocketReset"));
    }

    // --- METHOD: Update game state (collision detection, target spawning) ---
    function updateGameState() {
      const bulletElements = document.getElementsByClassName("bullet");
      const bulletsArray = Array.from(bulletElements);
      // Remove offscreen bullets
      bulletsArray.forEach((bulletElement) => {
        const bulletRect = bulletElement.getBoundingClientRect();
        if (
          bulletRect.right < 0 ||
          bulletRect.left > window.innerWidth ||
          bulletRect.bottom < 0 ||
          bulletRect.top > window.innerHeight
        ) {
          bulletElement.remove();
        }
      });
      // Check for bullet-target collisions
      if (gameSessionActive && activeTargetElement) {
        const targetRect = activeTargetElement.getBoundingClientRect();
        for (let bulletElement of bulletsArray) {
          const bulletRect = bulletElement.getBoundingClientRect();
          if (
            bulletRect.left < targetRect.right &&
            bulletRect.right > targetRect.left &&
            bulletRect.top < targetRect.bottom &&
            bulletRect.bottom > targetRect.top
          ) {
            if (!activeTargetElement.dataset.hit) {
              activeTargetElement.dataset.hit = "true";
              activeTargetElement.style.backgroundColor = "blue";
              clearTimeout(activeTargetElement.removalTimeout);
              bulletElement.remove();
              playerScore++;
              if (controlsDisplay) {
                controlsDisplay.innerHTML =
                  "Use arrow keys to move the rocket.<br>Press 'Space' to shoot.<br>Press 'Enter' to end the game.<br>Score: " +
                  playerScore;
              }
              setTimeout(removeTargetElement, 500);
            }
            break;
          }
        }
      }
      // Spawn a new target if none exists
      if (gameSessionActive && !gameHasEnded && !activeTargetElement) {
        spawnTargetElement();
      }
    }

    // --- MAIN GAME LOOP ---
    function gameLoop() {
      updateGameState();
      requestAnimationFrame(gameLoop);
    }
    gameLoop();
  }
</script>
